# -*- coding: utf-8 -*-
# Auto-generated by JsonStructure-py privte repo
# DO NOT CHANGE IF YOU DONT KNOW WHAT YOUR CHANGE FOR - Anysz
import os,sys

# Modification for better API
from . import config
from . import utils

class AnimeException(Exception):
    if (2, 6, 0) <= sys.version_info < (3, 0):
        def _get_message(self):
            return self._message
        def _set_message(self, message):
            self._message = message
        message = property(_get_message, _set_message)
    def __init__(self, code=None, headers=None, message=None):
        Exception.__init__(self, code, headers, message)

class Statistic(object):
    #remap
    #nowrite
    def __init__(self, 
        user_id=None, email=None, limit=None, limit_ttl=None, quota=None,
        quota_ttl=None, user_limit=None, user_limit_ttl=None, user_quota=None, 
        user_quota_ttl=None):
            self.user_id = user_id
            self.email   = email
            self.limit   = limit
            self.limit_ttl  = limit_ttl
            self.quota      = quota
            self.quota_ttl  = quota_ttl
            self.user_limit = user_limit
            self.user_limit_ttl = user_limit_ttl
            self.user_quota = user_quota
            self.user_quota_ttl = user_quota_ttl
    def read(self, map_array):
        try:
            self.user_id = map_array.get('user_id', None)
            self.email   = map_array.get('email', None)
            self.limit   = map_array.get('limit', None)
            self.limit_ttl = map_array.get('limit_ttl', None)
            self.quota   = map_array.get('quota', None)
            self.quota_ttl = map_array.get('quota_ttl', None)
            self.user_limit = map_array.get('user_limit', None)
            self.user_limit_ttl = map_array.get('user_limit_ttl', None)
            self.user_quota = map_array.get('user_quota', None)
            self.user_quota_ttl = map_array.get('user_quota_ttl', None)
        except Exception as e: pass
    def write(self):
        return {}
    def __repr__(self):
        L = ['%s=%r' % (key, value) for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

class AnimeScene(object):
    #remap 
    # :: from -> from_
    # :: tokenthumb -> token_thumb
    #nowrite
    def __init__(self, 
        anilist_id=None, diff=None, end=None, episode=None, expires=None,
        file=None, from_=None, i=None, is_adult=None, start=None, t=None, 
        title=None, title_chinese=None, title_english=None, title_native=None, title_romaji=None,
        to=None, token=None, token_thumb=None):
            self.anilist_id = anilist_id
            self.diff       = diff
            self.end        = end
            self.episode    = episode
            self.expires    = expires
            self.file       = file
            self.from_      = from_
            self.i          = i
            self.is_adult   = is_adult
            self.start      = start
            self.t          = t
            self.title      = title
            self.title_chinese = title_chinese
            self.title_english = title_english
            self.title_native  = title_native
            self.title_romaji = title_romaji
            self.to          = to
            self.token       = token
            self.token_thumb = token_thumb
            # Custom
            self.thumbnail_preview = None
            self.video_preview = None
    def getDuration(self):
        if(getattr(self, 'duration', None) == None):
            req = utils.sendGet(config.host['main'] + '/duration.php', params={
                'anilist_id': self.anilist_id,
                'file': self.file,
                'token': self.token,
            })
            if(req.status_code == 200):
                self.duration = req.content
                return req.content
            else:
                raise AnimeException(req.status_code, req.headers, req.content)
        else:
            return self.duration
    def getInfo(self):
        # NB. For better performace, i didn't generate this part to be structured
        if(getattr(self, 'info', None) == None):
            req = utils.sendGet(config.host['main'] + '/info', params={
                'anilist_id': self.anilist_id,
            })
            if(req.status_code == 200):
                try:
                    res_json = req.json()
                except Exception as e:
                    raise models.AnimeException("Application", "Cant decode json response: anime info api", e)
                self.info = res_json
                return res_json
            else:
                raise AnimeException(req.status_code, req.headers, req.content)
        else:
            return self.info
    def download(self,):
        #soon
        #https://trace.moe/16355/%5BHYSUB%5D%5BDansai%20Bunri%20no%20Crime%20Edge%5D%5B13%5D%5BEND%5D%5BBDrip%5D%5BBIG5_MP4%5D%5B1280X720%5D.mp4?start=468.92&end=489&token=1179zoqyavBFbFWVORrhHA
        #https://trace.moe/thumbnail.php?anilist_id=100569&file=%5BLeopard-Raws%5D%20Caligula%20-%2005%20RAW%20(BSFUJI%201280x720%20x264%20AAC).mp4&t=1429.75&token=eeTDkYvPhPfYoru_aypE3g
        #element host[main]/anilist_id/file?start&end&token
        raise AnimeException('Not Implemented', 'Source', 'Not implemented :( - if you want, just use utils.downloadStream to download the video profile.')
    def read(self, map_array):
        try: 
            self.anilist_id = map_array.get('anilist_id',None)
            self.diff       = map_array.get('diff', None)
            self.end        = map_array.get('end', None)
            self.episode    = map_array.get('episode', None)
            self.expires    = map_array.get('expires', None)
            self.file       = map_array.get('file', None)
            self.from_      = map_array.get('from', None)
            self.i          = map_array.get('i', None)
            self.is_adult   = map_array.get('is_adult', None)
            self.start      = map_array.get('start', None)
            self.t          = map_array.get('t', None)
            self.title      = map_array.get('title',None)
            self.title_chinese = map_array.get('title_chinese', None)
            self.title_english = map_array.get('title_english',None)
            self.title_native  = map_array.get('title_native', None)
            self.title_romaji = map_array.get('title_romaji',None)
            self.to          = map_array.get('to', None)
            self.token       = map_array.get('token', None)
            self.token_thumb = map_array.get('tokenthumb', None)
            # Custom
            self.thumbnail_preview = config.host['main'] + '/thumbnail.php?' + utils.urlencode({
                'anilist_id': self.anilist_id,
                'file': self.file,
                't': self.t,
                'token': self.token_thumb,
            })
            self.video_preview = config.host['main'] + f'/{self.anilist_id}/{utils.urlencode(self.file)}?' + utils.urlencode({
                "start": self.start,
                "end": self.end,
                "token": self.token,
            })
        except Exception as e: pass
    def write(self):
        return {}
    def __repr__(self):
        L = ['%s=%r' % (key, value) for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

class SearchResult(object):
    #remap
    # :: docs -> scenes [list]
    #nowrite
    def __init__(self,
        CacheHit=None, RawDocsCount=None, RawDocsSearchTime=None, ReRankSearchTime=None,
        scenes=None, limit=None, limit_ttl=None, quota=None, quota_ttl=None):
            self.CacheHit = CacheHit
            self.RawDocsCount = RawDocsCount
            self.RawDocsSearchTime = RawDocsSearchTime
            self.ReRankSearchTime  = ReRankSearchTime
            self.scenes = scenes
            self.limit  = limit
            self.limit_ttl = limit_ttl
            self.quota     = quota
            self.quota_ttl = quota_ttl
    def read(self, map_array):
        try:
            self.CacheHit = map_array.get('CacheHit', None)
            self.RawDocsCount = map_array.get('RawDocsCount', None)
            self.RawDocsSearchTime = map_array.get('RawDocsSearchTime', None)
            self.ReRankSearchTime = map_array.get('ReRankSearchTime', None)
            scenes = []
            for scene in map_array.get('docs', []):
                s1 = AnimeScene()
                s1.read(scene)
                scenes.append(s1)
            self.scenes = scenes
            self.limit = map_array.get('limit', None)
            self.limit_ttl = map_array.get('limit_ttl', None)
            self.quota = map_array.get('quota',None)
            self.quota_ttl = map_array.get('quota_ttl', None)
        except Exception as e: pass
    def write(self):
        return {}
    def __repr__(self):
        L = ['%s=%r' % (key, value) for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

# Explicit
class JsonStruct(object):
    def __init__(self):
        pass
    def read(self, map_array):
        for km, vm in map_array.items():
            km = km.replace(' ','_')
            setattr(self, km, vm)
    def write(self):
        return getattr(self, 'raw_map', {})
    def __repr__(self):
        L = ['%s=%r' % (key, value) for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))